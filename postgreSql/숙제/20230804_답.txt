-- 1.80번 부서에서 커미션을 받는 사원의 수와 최대 커미션 값과 최소 커미션 값을 출력
--     부서에 속해 있는 사원의 수 
select count(commission_pct), max(commission_pct), min(commission_pct),
       count(*)
from employees
where department_id = 80;

-- 2. 중복되지 않은 부서는?
select  distinct(department_id)
from employees;

-- 3. 중복되지 않은 부서의 수는?
select count(distinct(department_id))
from employees; 

-- 4. 커미션의 받는 사원의 커미션 평균과 
--    커미션을 받지 않는 사원을 포함한 커미션의 평균을 구하시오.
select trunc(avg(commission_pct), 4), 
       trunc(sum(commission_pct) / count(*),4),
       trunc(avg(coalesce (commission_pct,0)),4)
from employees;


--5. 90인부서의 급여의 평균, 합계, 최대, 최소, 사원의 수
select avg(salary), sum(salary), max(salary), min(salary),count(*)
from employees
where department_id = 90;
--      80인부서의 급여의 평균, 합계, 최대, 최소, 사원의 수
select avg(salary), sum(salary), max(salary), min(salary),count(*)
from employees
where department_id = 80;
--      70인부서의 급여의 평균, 합계, 최대, 최소, 사원의 수
--      ...
select avg(salary), sum(salary), max(salary), min(salary),count(*)
from employees
where department_id = 70;

-- 6. 각 부서별 부서의 급여의 평균, 합계, 최대, 최소, 사원의 수
select department_id, --  group by절에 있는 컬럼은 select절에 사용 가능하다.
       trunc(avg(salary),2), sum(salary), max(salary), min(salary),count(*)
from employees
group by department_id
order by  department_id;

-- 7. 같은 직무를 하는 사원들 중 제일 먼저 들어 온 사원가 제일 늦게 들어온 사원의 
---    입사일을 출력하시오.
select job_id, max(hire_date), min(hire_date)
from employees
group by job_id
order by job_id;

-- 8. 사원번호,  이름, 입사일, 직무, 부서를 출력할 때.
-- 부서는 오름차순으로 정렬하고 각 부서의 직무를 오름차순으로 정렬하여 출력하시오.   
select department_id, job_id, employee_id, first_name, hire_date
from employees
order by department_id, job_id;

-- 9.  각 부서의 직무별 급여 평균 , 합계, 담당하는 사원의 수를 출력
select department_id, job_id , trunc(avg(salary)), sum(salary), count(*)
from employees
group by department_id, job_id
order by department_id, job_id;

-- 10. 각부서에서 직무가 같은 사원들 중 입사일이 같은 사원의 수를 구하시오.
-- 사원수가 2명이상만 출력
select department_id, job_id, hire_date, count(*)
from employees                            --1                     
group by department_id, job_id, hire_date
having count(*) >= 2; 

-- 11. 평균급여가 7000이상인 부서만 출력하시오.평균 급여 높은 것 부터 출력하시오.
select department_id, avg(salary) sal
from employees
group by department_id
having avg(salary) >= 7000
order by 2 desc;

-- 12. 부서의 직원 수가 10명 미만이 부서를 출력하시오.
select department_id , count(*)
from employees
group by department_id
having count(*) < 10;

-- 13. 직무에 'REP'가 포함되어 있지 않은 직무별 급여의 평균, 합계, 최소, 
--- 최대 값을 출력할때 급여의 합계가 13000이상인 직무만 출력하시오.
select job_id, avg(salary), sum(salary), min(salary), max(salary)
from employees
where job_id not like '%REP%'
group by job_id
having sum(salary) >= 13000;

--14.  사원의 성, 급여 , 입사일, 직무를 출력할 대 직무명도 같이 출력하시오.
select last_name , salary, hire_date, employees.job_id, job_title
from employees, jobs
where employees.job_id = jobs.job_id;

-- 15. 부서 테이블에서 90인 부서정보
---    90인 부서의 직원을 구하시오,.
---    100번 사원 정보를 출력하시오.
select employee_id, last_name, first_name, salary, job_id,     
       d.department_id, location_id, department_name
from employees e, departments d  
where e.department_id= d.department_id
and e.department_id = 90 and employee_id = 100;

--16. 직원번호, 성, 이름, 급여, 직무, 부서번호, 지역번호, 부서명을 출력 
select employee_id, last_name, first_name, salary, job_id,     
       d.department_id, location_id, department_name
from employees e, departments d  
where e.department_id= d.department_id;

select employee_id, last_name, first_name, salary, job_id,     
       d.department_id, location_id, department_name
from employees e join departments d  
on e.department_id= d.department_id;

-- 17.직원번호 .성, 이름 급여 부서번호, 부서명을 100사원만 출력하시오.
select last_name, first_name, salary, e.department_id, department_name
from employees e join departments d
on e.department_id = d.department_id -
where employee_id = 100;


--18. 직원 번호, 성, 이름 , 직무, 직무명을 출력하세요.
select employee_id, last_name, first_name, 
		j.job_id, job_title
from employees e, jobs j
where e.job_id = j.job_id; -- 일반적으로 join조건은 primary key = foreign key
-- ansi - join 
select employee_id, last_name, first_name, 
		j.job_id, job_title
from employees e join jobs j
on e.job_id = j.job_id;
-- natual join
select employee_id, last_name, first_name, 
	job_id, job_title
from employees natural join jobs; 

--19. 부서장이 상사인 직원을 구하시오.
--직원번호, 성, 급여 입사일, 부서번호, 부서장번호를 출력하시오.
-- t-sql join
select employee_id, last_name, salary, hire_date, 
       d.department_id, d.manager_id
from employees e, departments d
where e.department_id = d.department_id and d.manager_id = e.manager_id;
-- ansi-join 
select employee_id, last_name, salary, hire_date, 
       d.department_id, d.manager_id
from employees e join departments d
on e.department_id = d.department_id and d.manager_id = e.manager_id;

--natural join
select employee_id, last_name, salary, hire_date, 
        department_id, manager_id
from employees natural join departments;
-- using절 사용
select employee_id, last_name, salary, hire_date, 
        department_id, manager_id
from employees join departments  using(department_id, manager_id);


--20. 성 이름 직원번호 , 전화번호 , 급여 부서번호, 부서명을 출력
select last_name, first_name, employee_id, phone_number, salary,
       d.department_id , department_name
from employees e join departments d
on e.department_id = d.department_id;
--- using절 사용
select last_name, first_name, employee_id, phone_number, salary,
       department_id , department_name
from employees join departments using(department_id);

--21. 각 부서의 부서의 정보와 부서장의 이름을 출력 하시오
select d.department_id, department_name, location_id, d.manager_id ,
       employee_id, first_name
from departments d, employees e
where d.manager_id = e.employee_id;

--22. 직원 번호, 직무 번호 , 직무내용
select employee_id, j.job_id, job_title
from employees e, jobs j
where e.job_id = j.job_id;

--23. 직원번호, 부서번호, 부서명
select employee_id, e.department_id, department_name
from employees e, departments d
where e.department_id = d.department_id;

--24. 각 직원의 직원번호, 직무번호, 직무 내용, 부서번호, 부서명
-- t-sql
select employee_id, e.job_id, job_title, e.department_id, department_name
from employees e, jobs j, departments d
where e.job_id = j.job_id and e.department_id = d.department_id;
-- ansi-join
select employee_id, e.job_id, job_title, e.department_id, department_name
from employees e join jobs j
on e.job_id = j.job_id join  departments d 
on e.department_id = d.department_id;
----NATURAL
select employee_id, job_id, job_title, department_id, department_name
from employees NATURAL join jobs join departments using (department_id);

--25. 부서장의 직무내용을 출력하시오. 부서장 번호, 직무내용,
select  d.manager_id, job_title
from jobs j,  employees e ,departments d
where e.job_id = j.job_id and e.employee_id = d.manager_id
and e.department_id = d.department_id;

-- 26. 성, 이름 , 급여, 부서, 부서명, 지역번호, 우편주소를 출력하시오
select last_name, first_name, salary, d.department_id, department_name, l.location_id, street_address
from employees e join departments d
on e.department_id = d.department_id
join locations l
on d.location_id = l.location_id;


--27. 직원번호, 성, 이름, 이메일, 부서번호, 부서명을 출력해주세요.
select employee_id, last_name, first_name, email, d.department_id, department_name
from employees e join departments d
on e.department_id = d.department_id;

--28. 직무번호, 직무내용, 성, 이름, 입사일을 출력하고,
--직무번호가 'SA_REP' 이며 입사일이 '020816' 일부터 '050921'까지인 직원정보를 출력해주세요.
select j.job_id, job_title, last_name, first_name, hire_date
from jobs j join employees e
on j.job_id = e.job_id 
where j.job_id = 'SA_REP'
and hire_date between '020816' and '050921';

--29. 직원번호, 성, 이름, 부서번호, 부서명을 출력하며 커미션을 받지 않는사람만 출력해주세요.
select employee_id, last_name, first_name, d.department_id, department_name
from employees e join departments d
on e.department_id = d.department_id
where commission_pct is null;

--30. 직원번호, 성, 이름, 부서번호, 부서명, 지역번호, 주소를 출력하고 도시가 'Toronto'에 사는 사람만 출력해주세요. 
select employee_id, last_name, first_name, d.department_id, department_name, l.location_id, street_address
from employees e join departments d
on e.department_id = d.department_id
join locations l
on d.location_id = l.location_id
where city = 'Toronto';

-- 31. 부서번호가 60인 사원의 성, 이름, 사원 번호, 급여, 부서명을 출력하시오.
select first_name, last_name, e.employee_id, 
        salary, d.department_id, department_name
from employees e, departments d
where e.department_id = d.department_id
and e.department_id = 60;

-- 32. 급여가 4800인 사원의 사원 번호,직무 번호, 직무명, 최소급여, 최대급여를 출력하시오.
select salary, e.employee_id, j.job_id, job_title, min_salary, max_salary
from employees e, jobs j
where e.job_id = j.job_id
and e.salary = 4800;

-- 33. 지역번호가 1700인 사원의 성과 이름, 전화번호, 고용일을 출력하시오.
select location_id, first_name, last_name, phone_number, hire_date
from employees e, departments d 
where e.department_id = d.department_id
and d.location_id = 1700;

--34.최소 급여가 4000인 직무를 가진 사원의 성, 이름, 직무명을 출력하시오.
select min_salary, first_name, last_name, j.job_id
from employees e, jobs j
where e.job_id = j.job_id
and j.min_salary = 4000;

-- 35.지역 번호가 4인 국가의 번호와 이름을 출력하시오.
select r.region_id, c.country_id, country_name
from regions r, countries c
where r.region_id = c.region_id
and r.region_id = 4;

--36. 지역 번호와 주소, 우편번호, 도시명이 출력되도록 하시오.
-- 단, UK인 국가만 나오도록 출력하시오.
select l.location_id, street_address, postal_code, city, c.country_id
from locations l, countries c
where l.country_id = c.country_id
and l.country_id = 'UK';

            
-- 37. 부서번호가 50인 사원의 직무시작과 직무종료일을 출력하시오.
select e.department_id, e.employee_id, start_date, end_date
from employees e, job_history h
where e.employee_id = h.employee_id
and e.department_id = 50;

-- 38. 나라 번호, 나라명, 지역 번호, 지역명을 출력하시오
-- 단 region_id 가 1인 것만 출력되도록 하시오.
select c.country_id, country_name, r.region_id, region_name
from hr.countries c, hr.regions r
where c.region_id = r.region_id
and c.region_id = 1;
